;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 10/21/2019
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;// I2C Bus functions
;#include <i2c.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Declare your global variables here
;
;// Voltage Reference: AVCC pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0029 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002A ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 002B // Delay needed for the stabilization of the ADC input voltage
; 0000 002C delay_us(10);
;PCODE: $00000013 VOL: 0
; 0000 002D // Start the AD conversion
; 0000 002E ADCSRA|=(1<<ADSC);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 002F // Wait for the AD conversion to complete
; 0000 0030 while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0031 ADCSRA|=(1<<ADIF);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0032 return ADCW;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0033 }
;PCODE: $00000021 VOL: 0
;
;
;void motor(int ML1,int ML2,int MR2,int MR1)
; 0000 0037 {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0038 
; 0000 0039  //-------------ML1
; 0000 003A  if (ML1>0)
;PCODE: $00000024 VOL: 0
;	ML1 -> Y+6
;	ML2 -> Y+4
;	MR2 -> Y+2
;	MR1 -> Y+0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 003B  {
; 0000 003C   PORTD.3=0;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 003D   OCR2=ML1;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 003E  }
; 0000 003F 
; 0000 0040  else if(ML1<=0)
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0041  {
; 0000 0042   PORTD.3=0;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0043   OCR2=ML1+255;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0044  }
; 0000 0045 
; 0000 0046  //-------------ML2
; 0000 0047   if(ML2>0)
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0048   {
; 0000 0049   PORTD.2=0;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 004A   OCR1A=ML2;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 004B   }
; 0000 004C 
; 0000 004D   else if(ML2<=0)
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 004E   {
; 0000 004F   PORTD.2=0;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0050   OCR1A=ML2+255;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0051   }
; 0000 0052 
; 0000 0053  //------------MR2
; 0000 0054   if(MR2>0)
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0055   {
; 0000 0056    PORTD.1=0;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0057    OCR1B=ML2;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0058   }
; 0000 0059 
; 0000 005A   else if(MR2<=0)
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 005B   {
; 0000 005C    PORTD.1=0;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 005D    OCR1B=MR2+255;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 005E   }
; 0000 005F 
; 0000 0060  //------------MR1
; 0000 0061  if(MR1>0)
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0062  {
; 0000 0063   PORTB.3=0;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0064   OCR0=MR1;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0065  }
; 0000 0066 
; 0000 0067  else if(ML1<=0)
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0068  {
; 0000 0069   PORTB.3=0;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 006A   OCR0=ML1+255;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 006B  }
; 0000 006C 
; 0000 006D 
; 0000 006E 
; 0000 006F 
; 0000 0070 }
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;
;
;
;
;
;void main(void)
; 0000 0077 {
;PCODE: $00000074 VOL: 0
; 0000 0078 // Declare your local variables here
; 0000 0079 
; 0000 007A // Input/Output Ports initialization
; 0000 007B // Port A initialization
; 0000 007C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 007D DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 007E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 007F PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0080 
; 0000 0081 // Port B initialization
; 0000 0082 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=In Bit0=In
; 0000 0083 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0084 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=T Bit0=T
; 0000 0085 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0086 
; 0000 0087 // Port C initialization
; 0000 0088 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0089 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 008A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 008B PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 008C 
; 0000 008D // Port D initialization
; 0000 008E // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 008F DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0090 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0091 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0092 
; 0000 0093 // Timer/Counter 0 initialization
; 0000 0094 // Clock source: System Clock
; 0000 0095 // Clock value: 125.000 kHz
; 0000 0096 // Mode: Fast PWM top=0xFF
; 0000 0097 // OC0 output: Non-Inverted PWM
; 0000 0098 // Timer Period: 2.048 ms
; 0000 0099 // Output Pulse(s):
; 0000 009A // OC0 Period: 2.048 ms Width: 0 us
; 0000 009B TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (1<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 009C TCNT0=0x00;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 009D OCR0=0x00;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 009E 
; 0000 009F // Timer/Counter 1 initialization
; 0000 00A0 // Clock source: System Clock
; 0000 00A1 // Clock value: 125.000 kHz
; 0000 00A2 // Mode: Fast PWM top=0x00FF
; 0000 00A3 // OC1A output: Non-Inverted PWM
; 0000 00A4 // OC1B output: Non-Inverted PWM
; 0000 00A5 // Noise Canceler: Off
; 0000 00A6 // Input Capture on Falling Edge
; 0000 00A7 // Timer Period: 2.048 ms
; 0000 00A8 // Output Pulse(s):
; 0000 00A9 // OC1A Period: 2.048 ms Width: 0 us// OC1B Period: 2.048 ms Width: 0 us
; 0000 00AA // Timer1 Overflow Interrupt: Off
; 0000 00AB // Input Capture Interrupt: Off
; 0000 00AC // Compare A Match Interrupt: Off
; 0000 00AD // Compare B Match Interrupt: Off
; 0000 00AE TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (1<<WGM10);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00AF TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00B0 TCNT1H=0x00;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00B1 TCNT1L=0x00;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00B2 ICR1H=0x00;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00B3 ICR1L=0x00;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00B4 OCR1AH=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00B5 OCR1AL=0x00;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00B6 OCR1BH=0x00;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00B7 OCR1BL=0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00B8 
; 0000 00B9 // Timer/Counter 2 initialization
; 0000 00BA // Clock source: System Clock
; 0000 00BB // Clock value: 125.000 kHz
; 0000 00BC // Mode: Fast PWM top=0xFF
; 0000 00BD // OC2 output: Non-Inverted PWM
; 0000 00BE // Timer Period: 2.048 ms
; 0000 00BF // Output Pulse(s):
; 0000 00C0 // OC2 Period: 2.048 ms Width: 0 us
; 0000 00C1 ASSR=0<<AS2;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00C2 TCCR2=(1<<PWM2) | (1<<COM21) | (0<<COM20) | (1<<CTC2) | (1<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00C3 TCNT2=0x00;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00C4 OCR2=0x00;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00C5 
; 0000 00C6 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00C7 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00C8 
; 0000 00C9 // External Interrupt(s) initialization
; 0000 00CA // INT0: Off
; 0000 00CB // INT1: Off
; 0000 00CC // INT2: Off
; 0000 00CD MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00CE MCUCSR=(0<<ISC2);
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00CF 
; 0000 00D0 // USART initialization
; 0000 00D1 // USART disabled
; 0000 00D2 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00D3 
; 0000 00D4 // Analog Comparator initialization
; 0000 00D5 // Analog Comparator: Off
; 0000 00D6 // The Analog Comparator's positive input is
; 0000 00D7 // connected to the AIN0 pin
; 0000 00D8 // The Analog Comparator's negative input is
; 0000 00D9 // connected to the AIN1 pin
; 0000 00DA ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00DB 
; 0000 00DC // ADC initialization
; 0000 00DD // ADC Clock frequency: 62.500 kHz
; 0000 00DE // ADC Voltage Reference: AVCC pin
; 0000 00DF // ADC Auto Trigger Source: ADC Stopped
; 0000 00E0 ADMUX=ADC_VREF_TYPE;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00E1 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00E2 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00E3 
; 0000 00E4 // SPI initialization
; 0000 00E5 // SPI disabled
; 0000 00E6 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00E7 
; 0000 00E8 // TWI initialization
; 0000 00E9 // TWI disabled
; 0000 00EA TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00EB 
; 0000 00EC // Bit-Banged I2C Bus initialization
; 0000 00ED // I2C Port: PORTB
; 0000 00EE // I2C SDA bit: 1
; 0000 00EF // I2C SCL bit: 0
; 0000 00F0 // Bit Rate: 100 kHz
; 0000 00F1 // Note: I2C settings are specified in the
; 0000 00F2 // Project|Configure|C Compiler|Libraries|I2C menu.
; 0000 00F3 i2c_init();
;PCODE: $000000BB VOL: 0
; 0000 00F4 
; 0000 00F5 // Alphanumeric LCD initialization
; 0000 00F6 // Connections are specified in the
; 0000 00F7 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00F8 // RS - PORTC Bit 0
; 0000 00F9 // RD - PORTC Bit 1
; 0000 00FA // EN - PORTC Bit 2
; 0000 00FB // D4 - PORTC Bit 4
; 0000 00FC // D5 - PORTC Bit 5
; 0000 00FD // D6 - PORTC Bit 6
; 0000 00FE // D7 - PORTC Bit 7
; 0000 00FF // Characters/line: 16
; 0000 0100 lcd_init(16);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0101 
; 0000 0102 while (1)
;PCODE: $000000BE VOL: 0
; 0000 0103       {
; 0000 0104 
; 0000 0105       motor(255,0,0,0);
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0106 
; 0000 0107       }
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0108 }
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
